IN_PIN documentation

Cole Johnson 11/21/23

this is documentation for the IN_PIN method and should be used to read high and low voltages running into
the board. Should be used for button or switches.


    Constructor and init function

the in pin object can be created by calling

from IN_PIN.py import create_IN_PIN
input_pin = create_IN_PIN(pin, high = 1)

the parameters for create_IN_PIN is the pin number on the board, and the high or low voltage trying to be sensed by
the board. If high is 1 (which it is by default so you can write create_IN_PIN(pin) and not include the high parameter)
the board will be looking for voltage to be flowing into the board, if high is 0 it is then looking for 
the lack of voltage. you need to figue out if your circuit is pull up or pull down.


    method / class functions

the function value() gets and returns the raw value of the input pin. it will be either 0 or 1 for low or high voltage,
and returns that value.

example:
print(input_pin.value())

the function is_high() returns True if the voltage going into the pin is 'high' and False if its 'low'.
if you are using this method to check if a button is pressed, when is_high() returns True the button is pressed
and False when not.

example:
print(input_pin.is_high())

the function is_low() is the opposite of is_high() in that it returns False when the voltage is 'high' and True
when its 'low'. if youa re using this method to check if a button is pressed, when is_low() returns True the
button is not being pressed.

example
print(input_pin.is_low())

the function get_pin_num() returns the board pin number of the input pin object. if the pin is on pin 5, this
function will return 5 as an int.

the function get_in_pin_obj_raw() returns the raw input pin object.


    Notes

the functions get_pin_num() and get_in_pin_obj_raw() are not the most useful for general code, and are mainly used
for debugging issues.

example:
from IN_PIN.py import create_IN_PIN
button = create_IN_PIN(1)

while True:
    print(button.is_high())
    # add a slight delay